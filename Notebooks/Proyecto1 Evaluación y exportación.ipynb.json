{
  "metadata": {
    "kernelspec": {
      "name": "python",
      "display_name": "Python (Pyodide)",
      "language": "python"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "python",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "1d1cb7a2-535d-474f-a7d4-bbb0dacca671",
      "cell_type": "code",
      "source": "# Librerías\nimport pandas as pd\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, accuracy_score, f1_score\nimport mlflow\nimport mlflow.sklearn\n\n# Cargar datos\nX = pd.read_csv(\"X_selected.csv\")\ny = pd.read_csv(\"y.csv\").squeeze()\nfrom sklearn.model_selection import train_test_split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Entrenar modelo final\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_test)\n\n# Evaluación\nprint(classification_report(y_test, y_pred))\nprint(\"Accuracy:\", accuracy_score(y_test, y_pred))\nprint(\"F1 Score:\", f1_score(y_test, y_pred))\n\n# Registro con MLflow\nwith mlflow.start_run():\n    mlflow.log_param(\"model\", \"RandomForestClassifier\")\n    mlflow.log_metric(\"accuracy\", accuracy_score(y_test, y_pred))\n    mlflow.log_metric(\"f1_score\", f1_score(y_test, y_pred))\n    mlflow.sklearn.log_model(model, \"random_forest_model\")\n\nprint(\"MLflow run registrado correctamente\")\n",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}